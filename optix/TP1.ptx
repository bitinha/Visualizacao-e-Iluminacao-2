//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	__closesthit__radiance
.const .align 8 .b8 optixLaunchParams[88];

.visible .entry __closesthit__radiance(

)
{
	.local .align 4 .b8 	__local_depot0[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<169>;
	.reg .b32 	%r<18>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<41>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd8, %SP, 0;
	add.u64 	%rd9, %SPL, 0;
	mov.u64 	%rd10, 1065353216;
	st.local.u32 	[%rd9+4], %rd10;
	st.local.u32 	[%rd9], %rd10;
	mov.u32 	%r4, 1065353216;
	st.local.u32 	[%rd9+8], %r4;
	ld.const.u64 	%rd11, [optixLaunchParams+80];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.global.v4.f32 	{%f21, %f22, %f23, %f24}, [%rd12];
	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd13, %r1;
	shl.b64 	%rd14, %rd13, 32;
	cvt.u64.u32	%rd15, %r2;
	or.b64  	%rd1, %rd14, %rd15;
	// inline asm
	call (%rd7), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd16, [%rd7];
	mul.wide.s32 	%rd17, %r3, 12;
	add.s64 	%rd18, %rd16, %rd17;
	ld.u32 	%rd3, [%rd18];
	ld.u32 	%rd4, [%rd18+4];
	ld.u32 	%rd5, [%rd18+8];
	// inline asm
	call (%f19, %f20), _optix_get_triangle_barycentrics, ();
	// inline asm
	ld.u32 	%r5, [%rd7+48];
	setp.eq.s32	%p1, %r5, 0;
	@%p1 bra 	BB0_3;

	ld.u64 	%rd6, [%rd7+24];
	setp.eq.s64	%p2, %rd6, 0;
	@%p2 bra 	BB0_3;

	mov.f32 	%f25, 0f3F800000;
	sub.ftz.f32 	%f26, %f25, %f19;
	sub.ftz.f32 	%f168, %f26, %f20;
	shl.b64 	%rd19, %rd3, 4;
	add.s64 	%rd20, %rd6, %rd19;
	ld.v2.f32 	{%f27, %f28}, [%rd20];
	shl.b64 	%rd21, %rd4, 4;
	add.s64 	%rd22, %rd6, %rd21;
	ld.v2.f32 	{%f31, %f32}, [%rd22];
	mul.ftz.f32 	%f35, %f19, %f31;
	mul.ftz.f32 	%f36, %f19, %f32;
	fma.rn.ftz.f32 	%f37, %f168, %f27, %f35;
	fma.rn.ftz.f32 	%f38, %f168, %f28, %f36;
	shl.b64 	%rd23, %rd5, 4;
	add.s64 	%rd24, %rd6, %rd23;
	ld.v2.f32 	{%f39, %f40}, [%rd24];
	fma.rn.ftz.f32 	%f43, %f20, %f39, %f37;
	fma.rn.ftz.f32 	%f44, %f20, %f40, %f38;
	ld.u64 	%rd25, [%rd7+56];
	tex.2d.v4.f32.f32	{%f167, %f166, %f165, %f45}, [%rd25, {%f43, %f44}];
	st.f32 	[%rd1], %f167;
	st.f32 	[%rd1+4], %f166;
	st.f32 	[%rd1+8], %f165;
	bra.uni 	BB0_4;

BB0_3:
	ld.v2.f32 	{%f167, %f166}, [%rd7+64];
	ld.f32 	%f165, [%rd7+72];
	st.f32 	[%rd1], %f167;
	st.f32 	[%rd1+4], %f166;
	st.f32 	[%rd1+8], %f165;
	mov.f32 	%f48, 0f3F800000;
	sub.ftz.f32 	%f49, %f48, %f19;
	sub.ftz.f32 	%f168, %f49, %f20;

BB0_4:
	cvt.u32.u64	%r15, %rd3;
	cvt.u32.u64	%r16, %rd4;
	cvt.u32.u64	%r17, %rd5;
	ld.u64 	%rd27, [%rd7+16];
	mul.wide.u32 	%rd28, %r15, 16;
	add.s64 	%rd29, %rd27, %rd28;
	ld.v4.f32 	{%f59, %f60, %f61, %f62}, [%rd29];
	mov.u32 	%r12, 1;
	mov.u32 	%r11, 2;
	mul.wide.u32 	%rd30, %r16, 16;
	add.s64 	%rd31, %rd27, %rd30;
	ld.v4.f32 	{%f67, %f68, %f69, %f70}, [%rd31];
	mul.ftz.f32 	%f75, %f19, %f67;
	mul.ftz.f32 	%f76, %f19, %f68;
	mul.ftz.f32 	%f77, %f19, %f69;
	mul.ftz.f32 	%f78, %f19, %f70;
	fma.rn.ftz.f32 	%f79, %f168, %f59, %f75;
	fma.rn.ftz.f32 	%f80, %f168, %f60, %f76;
	fma.rn.ftz.f32 	%f81, %f168, %f61, %f77;
	fma.rn.ftz.f32 	%f82, %f168, %f62, %f78;
	mul.wide.u32 	%rd32, %r17, 16;
	add.s64 	%rd33, %rd27, %rd32;
	ld.v4.f32 	{%f83, %f84, %f85, %f86}, [%rd33];
	fma.rn.ftz.f32 	%f91, %f20, %f83, %f79;
	fma.rn.ftz.f32 	%f92, %f20, %f84, %f80;
	fma.rn.ftz.f32 	%f93, %f20, %f85, %f81;
	fma.rn.ftz.f32 	%f94, %f20, %f86, %f82;
	mul.ftz.f32 	%f95, %f22, %f22;
	fma.rn.ftz.f32 	%f96, %f21, %f21, %f95;
	fma.rn.ftz.f32 	%f97, %f23, %f23, %f96;
	fma.rn.ftz.f32 	%f98, %f24, %f24, %f97;
	rsqrt.approx.ftz.f32 	%f99, %f98;
	mul.ftz.f32 	%f100, %f21, %f99;
	mul.ftz.f32 	%f101, %f22, %f99;
	mul.ftz.f32 	%f102, %f23, %f99;
	mul.ftz.f32 	%f103, %f24, %f99;
	mul.ftz.f32 	%f104, %f92, %f92;
	fma.rn.ftz.f32 	%f105, %f91, %f91, %f104;
	fma.rn.ftz.f32 	%f106, %f93, %f93, %f105;
	fma.rn.ftz.f32 	%f107, %f94, %f94, %f106;
	rsqrt.approx.ftz.f32 	%f108, %f107;
	mul.ftz.f32 	%f109, %f91, %f108;
	mul.ftz.f32 	%f110, %f92, %f108;
	mul.ftz.f32 	%f111, %f93, %f108;
	mul.ftz.f32 	%f112, %f94, %f108;
	mul.ftz.f32 	%f113, %f101, %f110;
	fma.rn.ftz.f32 	%f114, %f100, %f109, %f113;
	fma.rn.ftz.f32 	%f115, %f102, %f111, %f114;
	fma.rn.ftz.f32 	%f116, %f103, %f112, %f115;
	cvt.ftz.f64.f32	%fd1, %f116;
	mov.f64 	%fd2, 0d0000000000000000;
	max.f64 	%fd3, %fd1, %fd2;
	cvt.rn.ftz.f32.f64	%f117, %fd3;
	mov.f32 	%f118, 0f3F800000;
	sub.ftz.f32 	%f119, %f118, %f117;
	mul.ftz.f32 	%f120, %f167, %f119;
	mul.ftz.f32 	%f121, %f166, %f119;
	mul.ftz.f32 	%f122, %f119, %f165;
	st.f32 	[%rd1], %f120;
	st.f32 	[%rd1+4], %f121;
	st.f32 	[%rd1+8], %f122;
	ld.u64 	%rd34, [%rd7+8];
	add.s64 	%rd35, %rd34, %rd28;
	ld.v4.f32 	{%f123, %f124, %f125, %f126}, [%rd35];
	add.s64 	%rd36, %rd34, %rd30;
	ld.v4.f32 	{%f130, %f131, %f132, %f133}, [%rd36];
	mul.ftz.f32 	%f137, %f19, %f130;
	mul.ftz.f32 	%f138, %f19, %f131;
	mul.ftz.f32 	%f139, %f19, %f132;
	fma.rn.ftz.f32 	%f140, %f168, %f123, %f137;
	fma.rn.ftz.f32 	%f141, %f168, %f124, %f138;
	fma.rn.ftz.f32 	%f142, %f168, %f125, %f139;
	add.s64 	%rd37, %rd34, %rd32;
	ld.v4.f32 	{%f143, %f144, %f145, %f146}, [%rd37];
	fma.rn.ftz.f32 	%f50, %f20, %f143, %f140;
	fma.rn.ftz.f32 	%f51, %f20, %f144, %f141;
	fma.rn.ftz.f32 	%f52, %f20, %f145, %f142;
	ld.const.u64 	%rd26, [optixLaunchParams+72];
	neg.ftz.f32 	%f53, %f21;
	neg.ftz.f32 	%f54, %f22;
	neg.ftz.f32 	%f55, %f23;
	shr.u64 	%rd39, %rd8, 32;
	cvt.u32.u64	%r13, %rd39;
	cvt.u32.u64	%r14, %rd8;
	mov.u32 	%r8, 255;
	mov.f32 	%f56, 0f3A83126F;
	mov.f32 	%f57, 0f60AD78EC;
	mov.f32 	%f58, 0f00000000;
	// inline asm
	call (%r6, %r7), _optix_trace_2, (%rd26, %f50, %f51, %f52, %f53, %f54, %f55, %f56, %f57, %f58, %r8, %r12, %r12, %r11, %r12, %r13, %r14);
	// inline asm
	ld.f32 	%f150, [%rd1];
	ld.f32 	%f151, [%rd1+4];
	ld.f32 	%f152, [%rd1+8];
	ld.local.f32 	%f153, [%rd9];
	mul.ftz.f32 	%f154, %f150, %f153;
	ld.local.f32 	%f155, [%rd9+4];
	mul.ftz.f32 	%f156, %f151, %f155;
	ld.local.f32 	%f157, [%rd9+8];
	mul.ftz.f32 	%f158, %f152, %f157;
	mul.ftz.f32 	%f159, %f154, 0f3F4CCCCD;
	mul.ftz.f32 	%f160, %f156, 0f3F4CCCCD;
	mul.ftz.f32 	%f161, %f158, 0f3F4CCCCD;
	fma.rn.ftz.f32 	%f162, %f150, 0f3E4CCCCD, %f159;
	fma.rn.ftz.f32 	%f163, %f151, 0f3E4CCCCD, %f160;
	fma.rn.ftz.f32 	%f164, %f152, 0f3E4CCCCD, %f161;
	st.f32 	[%rd1], %f162;
	st.f32 	[%rd1+4], %f163;
	st.f32 	[%rd1+8], %f164;
	ret;
}

	// .globl	__anyhit__radiance
.visible .entry __anyhit__radiance(

)
{



	ret;
}

	// .globl	__miss__radiance
.visible .entry __miss__radiance(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<7>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 1060320051;
	st.u32 	[%rd4+4], %rd5;
	mov.u64 	%rd6, 0;
	st.u32 	[%rd4], %rd6;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame(

)
{
	.local .align 4 .b8 	__local_depot3[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<57>;
	.reg .b32 	%r<26>;
	.reg .b64 	%rd<10>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	// inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_launch_index_y, ();
	// inline asm
	mov.u64 	%rd4, 1065353216;
	st.local.u32 	[%rd3+4], %rd4;
	st.local.u32 	[%rd3], %rd4;
	mov.u32 	%r16, 1065353216;
	st.local.u32 	[%rd3+8], %r16;
	shr.u64 	%rd5, %rd2, 32;
	cvt.u32.u64	%r14, %rd5;
	cvt.u32.u64	%r15, %rd2;
	cvt.rn.f32.s32	%f10, %r1;
	add.ftz.f32 	%f11, %f10, 0f3F000000;
	cvt.rn.f32.s32	%f12, %r2;
	add.ftz.f32 	%f13, %f12, 0f3F000000;
	// inline asm
	call (%r4), _optix_get_launch_dimension_x, ();
	// inline asm
	// inline asm
	call (%r5), _optix_get_launch_dimension_y, ();
	// inline asm
	cvt.rn.f32.u32	%f14, %r4;
	cvt.rn.f32.u32	%f15, %r5;
	div.approx.ftz.f32 	%f16, %f11, %f14;
	div.approx.ftz.f32 	%f17, %f13, %f15;
	fma.rn.ftz.f32 	%f18, %f16, 0f40000000, 0fBF800000;
	fma.rn.ftz.f32 	%f19, %f17, 0f40000000, 0fBF800000;
	ld.const.v2.f32 	{%f20, %f21}, [optixLaunchParams+48];
	mov.u32 	%r13, 0;
	mov.u32 	%r10, 1;
	ld.const.v2.f32 	{%f24, %f25}, [optixLaunchParams+56];
	ld.const.v2.f32 	{%f28, %f29}, [optixLaunchParams+32];
	fma.rn.ftz.f32 	%f31, %f20, %f18, %f29;
	ld.const.v2.f32 	{%f32, %f33}, [optixLaunchParams+40];
	fma.rn.ftz.f32 	%f36, %f18, %f21, %f32;
	fma.rn.ftz.f32 	%f37, %f18, %f24, %f33;
	ld.const.v2.f32 	{%f38, %f39}, [optixLaunchParams+64];
	fma.rn.ftz.f32 	%f42, %f19, %f25, %f31;
	fma.rn.ftz.f32 	%f43, %f19, %f38, %f36;
	fma.rn.ftz.f32 	%f44, %f19, %f39, %f37;
	mul.ftz.f32 	%f45, %f43, %f43;
	fma.rn.ftz.f32 	%f46, %f42, %f42, %f45;
	fma.rn.ftz.f32 	%f47, %f44, %f44, %f46;
	rsqrt.approx.ftz.f32 	%f48, %f47;
	mul.ftz.f32 	%f4, %f42, %f48;
	mul.ftz.f32 	%f5, %f43, %f48;
	mul.ftz.f32 	%f6, %f44, %f48;
	ld.const.u64 	%rd1, [optixLaunchParams+72];
	ld.const.v2.f32 	{%f49, %f50}, [optixLaunchParams+24];
	mov.u32 	%r9, 255;
	mov.u32 	%r12, 2;
	mov.f32 	%f8, 0f60AD78EC;
	mov.f32 	%f9, 0f00000000;
	// inline asm
	call (%r7, %r8), _optix_trace_2, (%rd1, %f49, %f50, %f28, %f4, %f5, %f6, %f9, %f8, %f9, %r9, %r10, %r13, %r12, %r13, %r14, %r15);
	// inline asm
	ld.local.f32 	%f51, [%rd3];
	mul.ftz.f32 	%f52, %f51, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r17, %f52;
	ld.local.f32 	%f53, [%rd3+4];
	mul.ftz.f32 	%f54, %f53, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r18, %f54;
	ld.local.f32 	%f55, [%rd3+8];
	mul.ftz.f32 	%f56, %f55, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r19, %f56;
	shl.b32 	%r20, %r18, 8;
	shl.b32 	%r21, %r19, 16;
	or.b32  	%r22, %r17, %r20;
	or.b32  	%r23, %r22, %r21;
	or.b32  	%r24, %r23, -16777216;
	mad.lo.s32 	%r25, %r4, %r2, %r1;
	ld.const.u64 	%rd6, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.u32 	%rd8, %r25, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.u32 	[%rd9], %r24;
	ret;
}

	// .globl	__anyhit__shadow
.visible .entry __anyhit__shadow(

)
{



	ret;
}

	// .globl	__closesthit__shadow
.visible .entry __closesthit__shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 0;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__miss__shadow
.visible .entry __miss__shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 1065353216;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__closesthit__phong_alphaTrans
.visible .entry __closesthit__phong_alphaTrans(

)
{
	.local .align 4 .b8 	__local_depot7[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<7>;
	.reg .f32 	%f<161>;
	.reg .b32 	%r<18>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<44>;


	mov.u64 	%SPL, __local_depot7;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd8, %SP, 0;
	add.u64 	%rd9, %SPL, 0;
	mov.u64 	%rd10, 1065353216;
	st.local.u32 	[%rd9+4], %rd10;
	st.local.u32 	[%rd9], %rd10;
	mov.u32 	%r4, 1065353216;
	st.local.u32 	[%rd9+8], %r4;
	ld.const.u64 	%rd11, [optixLaunchParams+80];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.global.v4.f32 	{%f21, %f22, %f23, %f24}, [%rd12];
	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd13, %r1;
	shl.b64 	%rd14, %rd13, 32;
	cvt.u64.u32	%rd15, %r2;
	or.b64  	%rd1, %rd14, %rd15;
	// inline asm
	call (%rd7), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd16, [%rd7];
	mul.wide.s32 	%rd17, %r3, 12;
	add.s64 	%rd18, %rd16, %rd17;
	ld.u32 	%rd3, [%rd18];
	ld.u32 	%rd4, [%rd18+4];
	ld.u32 	%rd5, [%rd18+8];
	// inline asm
	call (%f19, %f20), _optix_get_triangle_barycentrics, ();
	// inline asm
	ld.u32 	%r5, [%rd7+48];
	setp.eq.s32	%p3, %r5, 0;
	@%p3 bra 	BB7_3;

	ld.u64 	%rd6, [%rd7+24];
	setp.eq.s64	%p4, %rd6, 0;
	@%p4 bra 	BB7_3;

	mov.f32 	%f25, 0f3F800000;
	sub.ftz.f32 	%f26, %f25, %f19;
	sub.ftz.f32 	%f157, %f26, %f20;
	shl.b64 	%rd19, %rd3, 4;
	add.s64 	%rd20, %rd6, %rd19;
	ld.v2.f32 	{%f27, %f28}, [%rd20];
	shl.b64 	%rd21, %rd4, 4;
	add.s64 	%rd22, %rd6, %rd21;
	ld.v2.f32 	{%f31, %f32}, [%rd22];
	mul.ftz.f32 	%f35, %f19, %f31;
	mul.ftz.f32 	%f36, %f19, %f32;
	fma.rn.ftz.f32 	%f37, %f157, %f27, %f35;
	fma.rn.ftz.f32 	%f38, %f157, %f28, %f36;
	shl.b64 	%rd23, %rd5, 4;
	add.s64 	%rd24, %rd6, %rd23;
	ld.v2.f32 	{%f39, %f40}, [%rd24];
	fma.rn.ftz.f32 	%f43, %f20, %f39, %f37;
	fma.rn.ftz.f32 	%f44, %f20, %f40, %f38;
	ld.u64 	%rd25, [%rd7+56];
	tex.2d.v4.f32.f32	{%f158, %f159, %f160, %f45}, [%rd25, {%f43, %f44}];
	setp.lt.ftz.f32	%p6, %f45, 0f3F000000;
	bra.uni 	BB7_4;

BB7_3:
	ld.v2.f32 	{%f158, %f159}, [%rd7+64];
	ld.f32 	%f160, [%rd7+72];
	mov.f32 	%f48, 0f3F800000;
	sub.ftz.f32 	%f49, %f48, %f19;
	sub.ftz.f32 	%f157, %f49, %f20;
	mov.pred 	%p6, 0;

BB7_4:
	cvt.u32.u64	%r15, %rd3;
	cvt.u32.u64	%r16, %rd4;
	cvt.u32.u64	%r17, %rd5;
	ld.u64 	%rd27, [%rd7+16];
	mul.wide.u32 	%rd28, %r15, 16;
	add.s64 	%rd29, %rd27, %rd28;
	ld.v4.f32 	{%f62, %f63, %f64, %f65}, [%rd29];
	mov.u32 	%r12, 0;
	mov.u32 	%r9, 1;
	mov.u32 	%r11, 2;
	mul.wide.u32 	%rd30, %r16, 16;
	add.s64 	%rd31, %rd27, %rd30;
	ld.v4.f32 	{%f70, %f71, %f72, %f73}, [%rd31];
	mul.ftz.f32 	%f78, %f19, %f70;
	mul.ftz.f32 	%f79, %f19, %f71;
	mul.ftz.f32 	%f80, %f19, %f72;
	mul.ftz.f32 	%f81, %f19, %f73;
	fma.rn.ftz.f32 	%f82, %f157, %f62, %f78;
	fma.rn.ftz.f32 	%f83, %f157, %f63, %f79;
	fma.rn.ftz.f32 	%f84, %f157, %f64, %f80;
	fma.rn.ftz.f32 	%f85, %f157, %f65, %f81;
	mul.wide.u32 	%rd32, %r17, 16;
	add.s64 	%rd33, %rd27, %rd32;
	ld.v4.f32 	{%f86, %f87, %f88, %f89}, [%rd33];
	fma.rn.ftz.f32 	%f94, %f20, %f86, %f82;
	fma.rn.ftz.f32 	%f95, %f20, %f87, %f83;
	fma.rn.ftz.f32 	%f96, %f20, %f88, %f84;
	fma.rn.ftz.f32 	%f97, %f20, %f89, %f85;
	mul.ftz.f32 	%f98, %f22, %f22;
	fma.rn.ftz.f32 	%f99, %f21, %f21, %f98;
	fma.rn.ftz.f32 	%f100, %f23, %f23, %f99;
	fma.rn.ftz.f32 	%f101, %f24, %f24, %f100;
	rsqrt.approx.ftz.f32 	%f102, %f101;
	mul.ftz.f32 	%f103, %f21, %f102;
	mul.ftz.f32 	%f104, %f22, %f102;
	mul.ftz.f32 	%f105, %f23, %f102;
	mul.ftz.f32 	%f106, %f24, %f102;
	mul.ftz.f32 	%f107, %f95, %f95;
	fma.rn.ftz.f32 	%f108, %f94, %f94, %f107;
	fma.rn.ftz.f32 	%f109, %f96, %f96, %f108;
	fma.rn.ftz.f32 	%f110, %f97, %f97, %f109;
	rsqrt.approx.ftz.f32 	%f111, %f110;
	mul.ftz.f32 	%f112, %f94, %f111;
	mul.ftz.f32 	%f113, %f95, %f111;
	mul.ftz.f32 	%f114, %f96, %f111;
	mul.ftz.f32 	%f115, %f97, %f111;
	mul.ftz.f32 	%f116, %f104, %f113;
	fma.rn.ftz.f32 	%f117, %f103, %f112, %f116;
	fma.rn.ftz.f32 	%f118, %f105, %f114, %f117;
	fma.rn.ftz.f32 	%f119, %f106, %f115, %f118;
	cvt.ftz.f64.f32	%fd1, %f119;
	mov.f64 	%fd2, 0d0000000000000000;
	max.f64 	%fd3, %fd1, %fd2;
	cvt.rn.ftz.f32.f64	%f120, %fd3;
	mov.f32 	%f121, 0f3F800000;
	sub.ftz.f32 	%f122, %f121, %f120;
	ld.f32 	%f123, [%rd1];
	mul.ftz.f32 	%f124, %f123, %f122;
	ld.f32 	%f125, [%rd1+4];
	mul.ftz.f32 	%f126, %f125, %f122;
	ld.f32 	%f127, [%rd1+8];
	mul.ftz.f32 	%f128, %f122, %f127;
	st.f32 	[%rd1], %f124;
	st.f32 	[%rd1+4], %f126;
	st.f32 	[%rd1+8], %f128;
	ld.u64 	%rd34, [%rd7+8];
	add.s64 	%rd35, %rd34, %rd28;
	ld.v4.f32 	{%f129, %f130, %f131, %f132}, [%rd35];
	add.s64 	%rd36, %rd34, %rd30;
	ld.v4.f32 	{%f136, %f137, %f138, %f139}, [%rd36];
	mul.ftz.f32 	%f143, %f19, %f136;
	mul.ftz.f32 	%f144, %f19, %f137;
	mul.ftz.f32 	%f145, %f19, %f138;
	fma.rn.ftz.f32 	%f146, %f157, %f129, %f143;
	fma.rn.ftz.f32 	%f147, %f157, %f130, %f144;
	fma.rn.ftz.f32 	%f148, %f157, %f131, %f145;
	add.s64 	%rd37, %rd34, %rd32;
	ld.v4.f32 	{%f149, %f150, %f151, %f152}, [%rd37];
	fma.rn.ftz.f32 	%f53, %f20, %f149, %f146;
	fma.rn.ftz.f32 	%f54, %f20, %f150, %f147;
	fma.rn.ftz.f32 	%f55, %f20, %f151, %f148;
	ld.const.u64 	%rd26, [optixLaunchParams+72];
	// inline asm
	call (%f50), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f51), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f52), _optix_get_world_ray_direction_z, ();
	// inline asm
	shr.u64 	%rd39, %rd8, 32;
	cvt.u32.u64	%r13, %rd39;
	cvt.u32.u64	%r14, %rd8;
	mov.u32 	%r8, 255;
	mov.f32 	%f59, 0f3A83126F;
	mov.f32 	%f60, 0f60AD78EC;
	mov.f32 	%f61, 0f00000000;
	// inline asm
	call (%r6, %r7), _optix_trace_2, (%rd26, %f53, %f54, %f55, %f50, %f51, %f52, %f59, %f60, %f61, %r8, %r9, %r12, %r11, %r12, %r13, %r14);
	// inline asm
	st.f32 	[%rd1], %f158;
	st.f32 	[%rd1+4], %f159;
	st.f32 	[%rd1+8], %f160;
	@!%p6 bra 	BB7_6;
	bra.uni 	BB7_5;

BB7_5:
	ld.local.u32 	%rd42, [%rd9];
	ld.local.f32 	%f156, [%rd9+8];
	ld.local.u32 	%rd43, [%rd9+4];
	st.u32 	[%rd1+4], %rd43;
	st.u32 	[%rd1], %rd42;
	st.f32 	[%rd1+8], %f156;

BB7_6:
	ret;
}

	// .globl	__anyhit__phong_alphaTrans
.visible .entry __anyhit__phong_alphaTrans(

)
{



	ret;
}

	// .globl	__miss__phong_alphaTrans
.visible .entry __miss__phong_alphaTrans(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<7>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	mov.u64 	%rd6, 1065353216;
	st.u32 	[%rd4], %rd6;
	mov.u32 	%r3, 0;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__anyhit__shadow_alphaTrans
.visible .entry __anyhit__shadow_alphaTrans(

)
{



	ret;
}

	// .globl	__closesthit__shadow_alphaTrans
.visible .entry __closesthit__shadow_alphaTrans(

)
{
	.local .align 4 .b8 	__local_depot11[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<83>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<33>;


	mov.u64 	%SPL, __local_depot11;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%rd6), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd7, [%rd6];
	mul.wide.s32 	%rd8, %r1, 12;
	add.s64 	%rd9, %rd7, %rd8;
	ld.u32 	%rd2, [%rd9];
	ld.u32 	%rd3, [%rd9+4];
	ld.u32 	%rd4, [%rd9+8];
	// inline asm
	call (%f5, %f6), _optix_get_triangle_barycentrics, ();
	// inline asm
	ld.u32 	%r2, [%rd6+48];
	setp.eq.s32	%p1, %r2, 0;
	@%p1 bra 	BB11_3;

	ld.u64 	%rd5, [%rd6+24];
	setp.eq.s64	%p2, %rd5, 0;
	@%p2 bra 	BB11_3;

	mov.f32 	%f9, 0f3F800000;
	sub.ftz.f32 	%f10, %f9, %f5;
	sub.ftz.f32 	%f11, %f10, %f6;
	shl.b64 	%rd10, %rd2, 4;
	add.s64 	%rd11, %rd5, %rd10;
	ld.v2.f32 	{%f12, %f13}, [%rd11];
	shl.b64 	%rd12, %rd3, 4;
	add.s64 	%rd13, %rd5, %rd12;
	ld.v2.f32 	{%f16, %f17}, [%rd13];
	mul.ftz.f32 	%f20, %f5, %f16;
	mul.ftz.f32 	%f21, %f5, %f17;
	fma.rn.ftz.f32 	%f22, %f11, %f12, %f20;
	fma.rn.ftz.f32 	%f23, %f11, %f13, %f21;
	shl.b64 	%rd14, %rd4, 4;
	add.s64 	%rd15, %rd5, %rd14;
	ld.v2.f32 	{%f24, %f25}, [%rd15];
	fma.rn.ftz.f32 	%f28, %f6, %f24, %f22;
	fma.rn.ftz.f32 	%f29, %f6, %f25, %f23;
	ld.u64 	%rd16, [%rd6+56];
	tex.2d.v4.f32.f32	{%f30, %f31, %f32, %f82}, [%rd16, {%f28, %f29}];

BB11_3:
	// inline asm
	call (%r3), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r4), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd18, %r3;
	shl.b64 	%rd19, %rd18, 32;
	cvt.u64.u32	%rd20, %r4;
	or.b64  	%rd21, %rd19, %rd20;
	mov.f32 	%f45, 0f3F800000;
	sub.ftz.f32 	%f46, %f45, %f5;
	sub.ftz.f32 	%f47, %f46, %f6;
	cvt.u32.u64	%r14, %rd2;
	ld.u64 	%rd22, [%rd6+8];
	mul.wide.u32 	%rd23, %r14, 16;
	add.s64 	%rd24, %rd22, %rd23;
	ld.v4.f32 	{%f48, %f49, %f50, %f51}, [%rd24];
	mov.u32 	%r11, 1;
	mov.u32 	%r10, 2;
	cvt.u32.u64	%r15, %rd3;
	mul.wide.u32 	%rd25, %r15, 16;
	add.s64 	%rd26, %rd22, %rd25;
	ld.v4.f32 	{%f55, %f56, %f57, %f58}, [%rd26];
	mul.ftz.f32 	%f62, %f5, %f55;
	mul.ftz.f32 	%f63, %f5, %f56;
	mul.ftz.f32 	%f64, %f5, %f57;
	fma.rn.ftz.f32 	%f65, %f47, %f48, %f62;
	fma.rn.ftz.f32 	%f66, %f47, %f49, %f63;
	fma.rn.ftz.f32 	%f67, %f47, %f50, %f64;
	cvt.u32.u64	%r16, %rd4;
	mul.wide.u32 	%rd27, %r16, 16;
	add.s64 	%rd28, %rd22, %rd27;
	ld.v4.f32 	{%f68, %f69, %f70, %f71}, [%rd28];
	fma.rn.ftz.f32 	%f36, %f6, %f68, %f65;
	fma.rn.ftz.f32 	%f37, %f6, %f69, %f66;
	fma.rn.ftz.f32 	%f38, %f6, %f70, %f67;
	add.u64 	%rd29, %SP, 0;
	add.u64 	%rd30, %SPL, 0;
	mov.u64 	%rd31, 1065353216;
	st.local.u32 	[%rd30+4], %rd31;
	st.local.u32 	[%rd30], %rd31;
	mov.u32 	%r17, 1065353216;
	st.local.u32 	[%rd30+8], %r17;
	shr.u64 	%rd32, %rd29, 32;
	cvt.u32.u64	%r12, %rd32;
	cvt.u32.u64	%r13, %rd29;
	ld.const.u64 	%rd17, [optixLaunchParams+72];
	// inline asm
	call (%f33), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f34), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f35), _optix_get_world_ray_direction_z, ();
	// inline asm
	mov.u32 	%r7, 255;
	mov.f32 	%f42, 0f3A83126F;
	mov.f32 	%f43, 0f60AD78EC;
	mov.f32 	%f44, 0f00000000;
	// inline asm
	call (%r5, %r6), _optix_trace_2, (%rd17, %f36, %f37, %f38, %f33, %f34, %f35, %f42, %f43, %f44, %r7, %r11, %r11, %r10, %r11, %r12, %r13);
	// inline asm
	ld.local.f32 	%f75, [%rd30];
	sub.ftz.f32 	%f76, %f45, %f82;
	mul.ftz.f32 	%f77, %f76, %f75;
	ld.local.f32 	%f78, [%rd30+4];
	mul.ftz.f32 	%f79, %f76, %f78;
	ld.local.f32 	%f80, [%rd30+8];
	mul.ftz.f32 	%f81, %f76, %f80;
	st.f32 	[%rd21], %f77;
	st.f32 	[%rd21+4], %f79;
	st.f32 	[%rd21+8], %f81;
	ret;
}

	// .globl	__miss__shadow_alphaTrans
.visible .entry __miss__shadow_alphaTrans(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<7>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	mov.u64 	%rd6, 1065353216;
	st.u32 	[%rd4], %rd6;
	mov.u32 	%r3, 0;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__closesthit__phong_glass
.visible .entry __closesthit__phong_glass(

)
{
	.local .align 4 .b8 	__local_depot13[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<191>;
	.reg .b32 	%r<28>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<46>;


	mov.u64 	%SPL, __local_depot13;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd8, %SP, 0;
	add.u64 	%rd9, %SPL, 0;
	mov.u64 	%rd10, 1065353216;
	st.local.u32 	[%rd9+4], %rd10;
	st.local.u32 	[%rd9], %rd10;
	mov.u32 	%r4, 1065353216;
	st.local.u32 	[%rd9+8], %r4;
	ld.const.u64 	%rd11, [optixLaunchParams+80];
	cvta.to.global.u64 	%rd12, %rd11;
	ld.global.v4.f32 	{%f21, %f22, %f23, %f24}, [%rd12];
	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd13, %r1;
	shl.b64 	%rd14, %rd13, 32;
	cvt.u64.u32	%rd15, %r2;
	or.b64  	%rd1, %rd14, %rd15;
	// inline asm
	call (%rd7), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd16, [%rd7];
	mul.wide.s32 	%rd17, %r3, 12;
	add.s64 	%rd18, %rd16, %rd17;
	ld.u32 	%rd3, [%rd18];
	ld.u32 	%rd4, [%rd18+4];
	ld.u32 	%rd5, [%rd18+8];
	// inline asm
	call (%f19, %f20), _optix_get_triangle_barycentrics, ();
	// inline asm
	ld.u32 	%r5, [%rd7+48];
	setp.eq.s32	%p1, %r5, 0;
	@%p1 bra 	BB13_3;

	ld.u64 	%rd6, [%rd7+24];
	setp.eq.s64	%p2, %rd6, 0;
	@%p2 bra 	BB13_3;

	mov.f32 	%f25, 0f3F800000;
	sub.ftz.f32 	%f26, %f25, %f19;
	sub.ftz.f32 	%f190, %f26, %f20;
	shl.b64 	%rd19, %rd3, 4;
	add.s64 	%rd20, %rd6, %rd19;
	ld.v2.f32 	{%f27, %f28}, [%rd20];
	shl.b64 	%rd21, %rd4, 4;
	add.s64 	%rd22, %rd6, %rd21;
	ld.v2.f32 	{%f31, %f32}, [%rd22];
	mul.ftz.f32 	%f35, %f19, %f31;
	mul.ftz.f32 	%f36, %f19, %f32;
	fma.rn.ftz.f32 	%f37, %f190, %f27, %f35;
	fma.rn.ftz.f32 	%f38, %f190, %f28, %f36;
	shl.b64 	%rd23, %rd5, 4;
	add.s64 	%rd24, %rd6, %rd23;
	ld.v2.f32 	{%f39, %f40}, [%rd24];
	fma.rn.ftz.f32 	%f43, %f20, %f39, %f37;
	fma.rn.ftz.f32 	%f44, %f20, %f40, %f38;
	ld.u64 	%rd25, [%rd7+56];
	tex.2d.v4.f32.f32	{%f189, %f188, %f187, %f45}, [%rd25, {%f43, %f44}];
	st.f32 	[%rd1], %f189;
	st.f32 	[%rd1+4], %f188;
	st.f32 	[%rd1+8], %f187;
	bra.uni 	BB13_4;

BB13_3:
	ld.v2.f32 	{%f189, %f188}, [%rd7+64];
	ld.f32 	%f187, [%rd7+72];
	st.f32 	[%rd1], %f189;
	st.f32 	[%rd1+4], %f188;
	st.f32 	[%rd1+8], %f187;
	mov.f32 	%f48, 0f3F800000;
	sub.ftz.f32 	%f49, %f48, %f19;
	sub.ftz.f32 	%f190, %f49, %f20;

BB13_4:
	cvt.u32.u64	%r24, %rd3;
	cvt.u32.u64	%r25, %rd4;
	cvt.u32.u64	%r26, %rd5;
	ld.u64 	%rd28, [%rd7+16];
	mul.wide.u32 	%rd29, %r24, 16;
	add.s64 	%rd30, %rd28, %rd29;
	ld.v4.f32 	{%f71, %f72, %f73, %f74}, [%rd30];
	mov.u32 	%r21, 0;
	mov.u32 	%r18, 1;
	mov.u32 	%r20, 2;
	mul.wide.u32 	%rd31, %r25, 16;
	add.s64 	%rd32, %rd28, %rd31;
	ld.v4.f32 	{%f79, %f80, %f81, %f82}, [%rd32];
	mul.ftz.f32 	%f87, %f19, %f79;
	mul.ftz.f32 	%f88, %f19, %f80;
	mul.ftz.f32 	%f89, %f19, %f81;
	mul.ftz.f32 	%f90, %f19, %f82;
	fma.rn.ftz.f32 	%f91, %f190, %f71, %f87;
	fma.rn.ftz.f32 	%f92, %f190, %f72, %f88;
	fma.rn.ftz.f32 	%f93, %f190, %f73, %f89;
	fma.rn.ftz.f32 	%f94, %f190, %f74, %f90;
	mul.wide.u32 	%rd33, %r26, 16;
	add.s64 	%rd34, %rd28, %rd33;
	ld.v4.f32 	{%f95, %f96, %f97, %f98}, [%rd34];
	fma.rn.ftz.f32 	%f103, %f20, %f95, %f91;
	fma.rn.ftz.f32 	%f104, %f20, %f96, %f92;
	fma.rn.ftz.f32 	%f105, %f20, %f97, %f93;
	fma.rn.ftz.f32 	%f106, %f20, %f98, %f94;
	mul.ftz.f32 	%f107, %f22, %f22;
	fma.rn.ftz.f32 	%f108, %f21, %f21, %f107;
	fma.rn.ftz.f32 	%f109, %f23, %f23, %f108;
	fma.rn.ftz.f32 	%f110, %f24, %f24, %f109;
	rsqrt.approx.ftz.f32 	%f111, %f110;
	mul.ftz.f32 	%f112, %f21, %f111;
	mul.ftz.f32 	%f113, %f22, %f111;
	mul.ftz.f32 	%f114, %f23, %f111;
	mul.ftz.f32 	%f115, %f24, %f111;
	mul.ftz.f32 	%f116, %f104, %f104;
	fma.rn.ftz.f32 	%f117, %f103, %f103, %f116;
	fma.rn.ftz.f32 	%f118, %f105, %f105, %f117;
	fma.rn.ftz.f32 	%f119, %f106, %f106, %f118;
	rsqrt.approx.ftz.f32 	%f120, %f119;
	mul.ftz.f32 	%f121, %f103, %f120;
	mul.ftz.f32 	%f122, %f104, %f120;
	mul.ftz.f32 	%f123, %f105, %f120;
	mul.ftz.f32 	%f124, %f106, %f120;
	mul.ftz.f32 	%f125, %f113, %f122;
	fma.rn.ftz.f32 	%f126, %f112, %f121, %f125;
	fma.rn.ftz.f32 	%f127, %f114, %f123, %f126;
	fma.rn.ftz.f32 	%f128, %f115, %f124, %f127;
	cvt.ftz.f64.f32	%fd1, %f128;
	mov.f64 	%fd2, 0d0000000000000000;
	max.f64 	%fd3, %fd1, %fd2;
	cvt.rn.ftz.f32.f64	%f129, %fd3;
	mov.f32 	%f130, 0f3F800000;
	sub.ftz.f32 	%f131, %f130, %f129;
	mul.ftz.f32 	%f132, %f189, %f131;
	mul.ftz.f32 	%f133, %f188, %f131;
	mul.ftz.f32 	%f134, %f131, %f187;
	st.f32 	[%rd1], %f132;
	st.f32 	[%rd1+4], %f133;
	st.f32 	[%rd1+8], %f134;
	// inline asm
	call (%f50), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f51), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f52), _optix_get_world_ray_direction_z, ();
	// inline asm
	mul.ftz.f32 	%f135, %f104, %f51;
	fma.rn.ftz.f32 	%f136, %f103, %f50, %f135;
	fma.rn.ftz.f32 	%f137, %f105, %f52, %f136;
	add.ftz.f32 	%f138, %f137, %f137;
	mul.ftz.f32 	%f139, %f103, %f138;
	mul.ftz.f32 	%f140, %f104, %f138;
	mul.ftz.f32 	%f141, %f105, %f138;
	sub.ftz.f32 	%f56, %f50, %f139;
	sub.ftz.f32 	%f57, %f51, %f140;
	sub.ftz.f32 	%f58, %f52, %f141;
	ld.u64 	%rd35, [%rd7+8];
	add.s64 	%rd36, %rd35, %rd29;
	ld.v4.f32 	{%f142, %f143, %f144, %f145}, [%rd36];
	add.s64 	%rd37, %rd35, %rd31;
	ld.v4.f32 	{%f149, %f150, %f151, %f152}, [%rd37];
	mul.ftz.f32 	%f156, %f19, %f149;
	mul.ftz.f32 	%f157, %f19, %f150;
	mul.ftz.f32 	%f158, %f19, %f151;
	fma.rn.ftz.f32 	%f159, %f190, %f142, %f156;
	fma.rn.ftz.f32 	%f160, %f190, %f143, %f157;
	fma.rn.ftz.f32 	%f161, %f190, %f144, %f158;
	add.s64 	%rd38, %rd35, %rd33;
	ld.v4.f32 	{%f162, %f163, %f164, %f165}, [%rd38];
	fma.rn.ftz.f32 	%f53, %f20, %f162, %f159;
	fma.rn.ftz.f32 	%f54, %f20, %f163, %f160;
	fma.rn.ftz.f32 	%f55, %f20, %f164, %f161;
	ld.const.u64 	%rd26, [optixLaunchParams+72];
	cvt.u32.u64	%r14, %rd8;
	shr.u64 	%rd40, %rd8, 32;
	cvt.u32.u64	%r13, %rd40;
	mov.u32 	%r17, 255;
	mov.f32 	%f68, 0f3A83126F;
	mov.f32 	%f69, 0f60AD78EC;
	mov.f32 	%f70, 0f00000000;
	// inline asm
	call (%r6, %r7), _optix_trace_2, (%rd26, %f53, %f54, %f55, %f56, %f57, %f58, %f68, %f69, %f70, %r17, %r18, %r21, %r20, %r21, %r13, %r14);
	// inline asm
	add.u64 	%rd41, %SP, 12;
	add.u64 	%rd42, %SPL, 12;
	st.local.u32 	[%rd42+4], %rd10;
	st.local.u32 	[%rd42], %rd10;
	st.local.u32 	[%rd42+8], %r4;
	shr.u64 	%rd44, %rd41, 32;
	cvt.u32.u64	%r22, %rd44;
	cvt.u32.u64	%r23, %rd41;
	// inline asm
	call (%r15, %r16), _optix_trace_2, (%rd26, %f53, %f54, %f55, %f50, %f51, %f52, %f68, %f69, %f70, %r17, %r18, %r21, %r20, %r21, %r22, %r23);
	// inline asm
	ld.local.f32 	%f169, [%rd42];
	ld.local.f32 	%f170, [%rd42+4];
	ld.local.f32 	%f171, [%rd42+8];
	ld.local.f32 	%f172, [%rd9];
	mul.ftz.f32 	%f173, %f172, 0f3DCCCCCD;
	ld.local.f32 	%f174, [%rd9+4];
	mul.ftz.f32 	%f175, %f174, 0f3DCCCCCD;
	ld.local.f32 	%f176, [%rd9+8];
	mul.ftz.f32 	%f177, %f176, 0f3DCCCCCD;
	fma.rn.ftz.f32 	%f178, %f169, 0f3F4CCCCD, %f173;
	fma.rn.ftz.f32 	%f179, %f170, 0f3F4CCCCD, %f175;
	fma.rn.ftz.f32 	%f180, %f171, 0f3F4CCCCD, %f177;
	ld.f32 	%f181, [%rd1];
	ld.f32 	%f182, [%rd1+4];
	ld.f32 	%f183, [%rd1+8];
	fma.rn.ftz.f32 	%f184, %f181, 0f3DCCCCCD, %f178;
	fma.rn.ftz.f32 	%f185, %f182, 0f3DCCCCCD, %f179;
	fma.rn.ftz.f32 	%f186, %f183, 0f3DCCCCCD, %f180;
	st.f32 	[%rd1], %f184;
	st.f32 	[%rd1+4], %f185;
	st.f32 	[%rd1+8], %f186;
	ret;
}

	// .globl	__anyhit__phong_glass
.visible .entry __anyhit__phong_glass(

)
{



	ret;
}

	// .globl	__miss__phong_glass
.visible .entry __miss__phong_glass(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<7>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 1060320051;
	st.u32 	[%rd4+4], %rd5;
	mov.u64 	%rd6, 0;
	st.u32 	[%rd4], %rd6;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__anyhit__shadow_glass
.visible .entry __anyhit__shadow_glass(

)
{



	ret;
}

	// .globl	__closesthit__shadow_glass
.visible .entry __closesthit__shadow_glass(

)
{
	.local .align 4 .b8 	__local_depot17[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<46>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<23>;


	mov.u64 	%SPL, __local_depot17;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd3, %SP, 0;
	add.u64 	%rd4, %SPL, 0;
	mov.u64 	%rd5, 1065353216;
	st.local.u32 	[%rd4+4], %rd5;
	st.local.u32 	[%rd4], %rd5;
	mov.u32 	%r13, 1065353216;
	st.local.u32 	[%rd4+8], %r13;
	shr.u64 	%rd6, %rd3, 32;
	cvt.u32.u64	%r11, %rd6;
	cvt.u32.u64	%r12, %rd3;
	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd7, %r1;
	shl.b64 	%rd8, %rd7, 32;
	cvt.u64.u32	%rd9, %r2;
	or.b64  	%rd10, %rd8, %rd9;
	// inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd11, [%rd1];
	mul.wide.s32 	%rd12, %r3, 12;
	add.s64 	%rd13, %rd11, %rd12;
	ld.u32 	%r14, [%rd13];
	ld.u32 	%r15, [%rd13+4];
	ld.u32 	%r16, [%rd13+8];
	// inline asm
	call (%f1, %f2), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f15, 0f3F800000;
	sub.ftz.f32 	%f16, %f15, %f1;
	sub.ftz.f32 	%f17, %f16, %f2;
	ld.u64 	%rd14, [%rd1+8];
	mul.wide.u32 	%rd15, %r14, 16;
	add.s64 	%rd16, %rd14, %rd15;
	ld.v4.f32 	{%f18, %f19, %f20, %f21}, [%rd16];
	mov.u32 	%r10, 1;
	mov.u32 	%r9, 2;
	mul.wide.u32 	%rd17, %r15, 16;
	add.s64 	%rd18, %rd14, %rd17;
	ld.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd18];
	mul.ftz.f32 	%f32, %f1, %f25;
	mul.ftz.f32 	%f33, %f1, %f26;
	mul.ftz.f32 	%f34, %f1, %f27;
	fma.rn.ftz.f32 	%f35, %f18, %f17, %f32;
	fma.rn.ftz.f32 	%f36, %f19, %f17, %f33;
	fma.rn.ftz.f32 	%f37, %f20, %f17, %f34;
	mul.wide.u32 	%rd19, %r16, 16;
	add.s64 	%rd20, %rd14, %rd19;
	ld.v4.f32 	{%f38, %f39, %f40, %f41}, [%rd20];
	fma.rn.ftz.f32 	%f6, %f2, %f38, %f35;
	fma.rn.ftz.f32 	%f7, %f2, %f39, %f36;
	fma.rn.ftz.f32 	%f8, %f2, %f40, %f37;
	ld.const.u64 	%rd2, [optixLaunchParams+72];
	// inline asm
	call (%f3), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f4), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f5), _optix_get_world_ray_direction_z, ();
	// inline asm
	mov.u32 	%r6, 255;
	mov.f32 	%f12, 0f3A83126F;
	mov.f32 	%f13, 0f60AD78EC;
	mov.f32 	%f14, 0f00000000;
	// inline asm
	call (%r4, %r5), _optix_trace_2, (%rd2, %f6, %f7, %f8, %f3, %f4, %f5, %f12, %f13, %f14, %r6, %r10, %r10, %r9, %r10, %r11, %r12);
	// inline asm
	ld.local.u32 	%rd21, [%rd4];
	ld.local.f32 	%f45, [%rd4+8];
	ld.local.u32 	%rd22, [%rd4+4];
	st.u32 	[%rd10+4], %rd22;
	st.u32 	[%rd10], %rd21;
	st.f32 	[%rd10+8], %f45;
	ret;
}

	// .globl	__miss__shadow_glass
.visible .entry __miss__shadow_glass(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 1065353216;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}


